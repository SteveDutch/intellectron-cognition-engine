package com.stevedutch.intellectron.service;


// Generated by CodiumAI

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Optional;

import org.junit.Test;
import org.junit.jupiter.api.BeforeEach;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.stevedutch.intellectron.domain.Note;
import com.stevedutch.intellectron.domain.Zettel;
import com.stevedutch.intellectron.repository.ZettelRepository;

public class ZettelServiceCodiumTest {
	
	private static final Logger LOG = LoggerFactory.getLogger(ZettelService.class);
	
	@InjectMocks
	private ZettelService zettelService;
	@Mock
	 private ZettelRepository zettelRepo;
	
    @BeforeEach
    public void setUp() {
    	zettelService = mock(ZettelService.class);
    }

    // updates a Zettel with new values when all fields are provide
    @Test
    public void test_updateZettel_allFieldsProvided() {
        // Arrange
        Zettel zettel = new Zettel();
        zettel.setZettelId(1L);
        zettel.setTopic("Topic");
        zettel.setAdded(LocalDateTime.now());
        zettel.setChanged(LocalDateTime.now());
        zettel.setSignature(1234567890L);
        zettel.setNote(new Note());
        zettel.setTags(new ArrayList<>());
    
        // Act
        Zettel updatedZettel = zettelService.updateZettel(zettel);
    
        // Assert
        assertNotNull(updatedZettel);
        assertEquals(zettel.getZettelId(), updatedZettel.getZettelId());
        assertEquals(zettel.getTopic(), updatedZettel.getTopic());
        assertEquals(zettel.getAdded(), updatedZettel.getAdded());
        assertEquals(zettel.getChanged(), updatedZettel.getChanged());
        assertEquals(zettel.getSignature(), updatedZettel.getSignature());
        assertEquals(zettel.getNote(), updatedZettel.getNote());
        assertEquals(zettel.getTags(), updatedZettel.getTags());
    }

    // updates a Zettel with new values when only some fields are provided
    @Test
    public void test_updateZettel_someFieldsProvided() {
        // Arrange
        Zettel existingZettel = new Zettel();
        existingZettel.setZettelId(1L);
        existingZettel.setTopic("Existing Topic");
        existingZettel.setAdded(LocalDateTime.now());
        existingZettel.setChanged(LocalDateTime.now());
        existingZettel.setSignature(1234567890L);
        existingZettel.setNote(new Note());
        existingZettel.setTags(new ArrayList<>());
    
        Zettel zettel = new Zettel();
        zettel.setZettelId(1L);
        zettel.setTopic("New Topic");
        zettelService = mock(ZettelService.class);
    
        // Act
        Zettel updatedZettel = zettelService.updateZettel(zettel);
        LOG.info(updatedZettel.toString());
    
        // Assert
        assertNotNull(updatedZettel);
        assertEquals(existingZettel.getZettelId(), updatedZettel.getZettelId());
        assertEquals(zettel.getTopic(), updatedZettel.getTopic());
        assertEquals(existingZettel.getAdded(), updatedZettel.getAdded());
        assertEquals(existingZettel.getChanged(), updatedZettel.getChanged());
        assertEquals(existingZettel.getSignature(), updatedZettel.getSignature());
        assertEquals(existingZettel.getNote(), updatedZettel.getNote());
        assertEquals(existingZettel.getTags(), updatedZettel.getTags());
    }

    // returns the updated Zettel
    @Test
    public void test_updateZettel_returnsUpdatedZettel() {
        // Arrange
        Zettel zettel = new Zettel();
        zettel.setZettelId(1L);
        zettel.setTopic("Topic");
    
        // Act
        Zettel updatedZettel = zettelService.updateZettel(zettel);
    
        // Assert
        assertNotNull(updatedZettel);
        assertEquals(zettel.getZettelId(), updatedZettel.getZettelId());
        assertEquals(zettel.getTopic(), updatedZettel.getTopic());
    }

    // creates a new Zettel when the provided Zettel ID is null
    @Test
    public void test_updateZettel_createsNewZettel() {
        // Arrange
        Zettel zettel = new Zettel();
        zettel.setTopic("Topic");
    
        // Act
        Zettel updatedZettel = zettelService.updateZettel(zettel);
    
        // Assert
        assertNotNull(updatedZettel);
        assertNotNull(updatedZettel.getZettelId());
        assertEquals(zettel.getTopic(), updatedZettel.getTopic());
    }

    // does not update the Zettel when the provided Zettel ID is not found in the database
    @Test
    public void test_updateZettel_idNotFound() {
        // Arrange
        Zettel zettel = new Zettel();
        zettel.setZettelId(1L);
        zettel.setTopic("Topic");
        zettelRepo = mock(ZettelRepository.class);
        zettelService = mock(ZettelService.class);
    
        when(zettelRepo.findById(anyLong())).thenReturn(Optional.empty());
    
        // Act
        Zettel updatedZettel = zettelService.updateZettel(zettel);
    
        // Assert
        assertNull(updatedZettel);
    }
}